import telebot
import datetime
import requests
import subprocess
import csv
import os
import json
from flask import Flask, request, jsonify
from telebot import types

TOKEN = "7957786141:AAG454kaD5Jda96CFrNmQTA7RO1tm5zqTjU"
CRYPTO_PAY_API = "YOUR_CRYPTOPAY_API_TOKEN"
OWNER_ID = 6331422352  # ID администратора
SHADOWSOCKS_CONFIG = "/etc/shadowsocks/config.json"
USER_DATA_DIR = os.path.expanduser("~/.vpn_bot/")
USER_DATA_FILE = os.path.join(USER_DATA_DIR, "vpn_users.txt")

# Убедимся, что директория существует
os.makedirs(USER_DATA_DIR, exist_ok=True)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# Функция для чтения пользователей из файла
def read_users():
    users = {}
    try:
        with open(USER_DATA_FILE, "r") as file:
            for line in file:
                user_id, start_date, end_date, subscribed, ss_port = line.strip().split(",")
                users[int(user_id)] = {
                    "start_date": start_date,
                    "end_date": end_date,
                    "subscribed": int(subscribed),
                    "ss_port": int(ss_port) if ss_port != "None" else None,
                }
    except FileNotFoundError:
        pass
    return users

# Функция для записи пользователей в файл
def write_users(users):
    with open(USER_DATA_FILE, "w") as file:
        for user_id, data in users.items():
            file.write(f"{user_id},{data['start_date']},{data['end_date']},{data['subscribed']},{data['ss_port']}\n")

# Генерация порта для Shadowsocks
def generate_ss_port(users):
    ports = [user["ss_port"] for user in users.values() if user["ss_port"]]
    return max(ports) + 1 if ports else 8388

# Функция для обновления конфигурации Shadowsocks
def update_shadowsocks_config():
    users = read_users()
    config = {
        "server": "0.0.0.0",
        "server_port": 8388,
        "password": "default_password",
        "timeout": 300,
        "method": "aes-256-gcm",
        "fast_open": False,
        "workers": 1,
        "additional_ports": {}
    }
    
    for user_id, data in users.items():
        if data["subscribed"] and data["ss_port"]:
            config["additional_ports"][str(data["ss_port"])] = f"vpn{user_id}"

    try:
        with open(SHADOWSOCKS_CONFIG, "w") as file:
            json.dump(config, file, indent=4)
        subprocess.run(["systemctl", "restart", "shadowsocks"], check=True)
    except Exception as e:
        print(f"Ошибка обновления Shadowsocks: {e}")

# Команда /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    users = read_users()
    if user_id not in users:
        start_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        end_date = (datetime.datetime.now() + datetime.timedelta(days=3)).strftime("%Y-%m-%d %H:%M:%S")
        users[user_id] = {"start_date": start_date, "end_date": end_date, "subscribed": 0, "ss_port": None}
        write_users(users)
        bot.send_message(user_id, "Добро пожаловать! Вам доступен 3-дневный пробный период.")
    else:
        bot.send_message(user_id, "Вы уже зарегистрированы. Проверьте статус подписки командой /status")

# Команда /get_ss для получения данных Shadowsocks
@bot.message_handler(commands=['get_ss'])
def get_ss(message):
    user_id = message.chat.id
    users = read_users()
    if user_id not in users:
        bot.send_message(user_id, "Вы не зарегистрированы. Используйте /start.")
        return
    if not users[user_id]["subscribed"]:
        bot.send_message(user_id, "У вас нет активной подписки. Пополните баланс командой /buy.")
        return
    
    if not users[user_id]["ss_port"]:
        users[user_id]["ss_port"] = generate_ss_port(users)
        write_users(users)
        update_shadowsocks_config()

    bot.send_message(user_id, f"Ваш Shadowsocks доступ:\n"
                              f"IP: [ЗАМЕНИ НА IP СЕРВЕРА]\n"
                              f"Порт: {users[user_id]['ss_port']}\n"
                              f"Пароль: vpn{user_id}\n"
                              f"Метод шифрования: aes-256-gcm")

# Запуск бота
if __name__ == '__main__':
    bot.polling(none_stop=True)
    app.run(host='0.0.0.0', port=5000)



